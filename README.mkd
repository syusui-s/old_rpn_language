逆ポーランド関数電卓ソフト
==========================

はじめに
--------

![電卓画面](./htmldoc/cui01.png)

今回は、関数電卓ソフトを制作しました。関数電卓は、logやsinなどの数学関数を計算できる計算機です。
コンピュータで数学の数式を計算できるように設計しました。

今回は入力方式に逆ポーランド記法を採用しています。米国のヒューレットパッカード社の一部の製品が採用している入力方式です。
日本ではあまり普及していない方式なので、日本では見かけることがないかもしれません。
 この関数電卓では、本物の逆ポーランド電卓とは違い、一行で入力する方式を採っています。

![作ろうと思っていたもの](./htmldoc/gui01.png)

当初は、GUIの実装やさらに一般的な中置記法に対応し、
演算機能をライブラリ化した関数電卓の構想を持っていましたが、
今までに実装できたのは、演算機能とCUIの実装だけでした。
このページでは、関数電卓のCUI版を紹介したいと思います。

特徴
----

### 逆ポーランド記法

逆ポーランド記法は、数式を表わす方法の一種です。私たちは普段、数式を中置記法で表しています。

中置記法の例: `4 * 6 + 1`

このように、中置記法では、演算子（＋、－、×、÷など）を数と数の間に置くことで、それらの数を足したり、引いたりするという計算を表しています。
 これに対し、ポーランド記法では、計算されるの後に演算子を置くことで、計算を表現します。
 次の式は、先ほどの`4 * 6 + 1`を逆ポーランド記法で表したものです。

逆ポーランド記法の例： `4 6 * 1 +`

「*4*と*6*を*かけた*ものに、*1*を*足す*」と表現すればわかりやすいでしょうか。
 赤文字で強調したところの順番と、式の順番が同じになっているのがわかりますか？
 このように、逆ポーランド記法では、*演算子は前の要素に対して計算を行います*。

### 対話式入力

この関数電卓は、コンソール上で動作します。その特性上、対話式入力を採用しました（他の方式がしんどいだけです）。
ちょうど当ページ上部の画像のようにユーザーが式を入力すると、コンピューターが式を計算し、答えてくれます。

### 大きな数に対応

整数型は、intよりも大きいlong型を採用しています。浮動小数点型は、doubleを採用しています。

使い方
------

### 演算子・関数一覧

|演算子・関数|被演算子数|説明|使用例|
|:-----------|:---------|:---|:-----|
|+|2|加算（足し算） `OP1+OP2`|`OP1 OP2 +`|
|-|2|減算（引き算） `OP1-OP2`|`OP1 OP2 -`|
|\*|2|乗算（かけ算） `OP1*OP2`|`OP1 OP2 *`|
|/|2|除算（わり算） `OP1/OP2`|`OP1 OP2 /`|
|mod|2|余剰 OP1をOP2でわったときのあまりを求めます
`OP1 MOD OP2`|`OP1 OP2 mod`|
|abs|1|絶対値を求めます。`|OP1|`|`OP1 abs`|
|pm|1|+/-の符号を反転させます。|`OP1 pm`|
|1/x,inv|1|逆数を求めます。|`OP1 1/x`,`OP1 inv`|
|pow|2|べき乗を計算します。OP1のOP2乗を求めます。|`OP1 OP2 pow`|
|\^2|1|OP1の平方（2乗）を求めます。|`2 ^2`|
|\^3|1|OP1の立方（3乗）を求めます。|`2 ^3`|
|sqrt|1|OP1の平方根を求めます。|`OP1 sqrt`|
|cbrt|1|OP1の立方根を求めます。|`OP1 cbrt`|
|lg|1|OP1の常用対数を求めます。`log_10 (OP1)`|`OP1 lg`|
|ln|1|OP1の自然対数を求めます。`log_e (OP1)`|`OP1 ln`|
|log|2|OP1を底とするOP2の対数を求めます。`log_OP1 (OP2)`|`OP1 OP2 log`|
|sin|1|角度OP1の正接（サイン）を求めます。`sin(OP1)`|`OP1 sin`|
|cos|1|角度OP1の余弦（コサイン）を求めます。`cos(OP1)`|`OP1 cos`|
|tan|1|角度OP1の正接（タンジェント）を求めます。`tan(OP1)`|`OP1 tan`|

仕組み
------

このプログラムの仕組みを少し説明しようと思います。 下の図をご覧ください。

![大雑把な動作の仕組み](./htmldoc/img01.png)

入力された式が正しいときの処理の流れです。

1.  入力を待ちます。Input\> と表示されている状態です。
2.  入力された文字列をスペースごとに分解します。
3.  分解されたそれぞれの値を「要素」として扱うようにします。この時、それぞれの値が数なのか、演算子なのか判断します。
4.  要素を並べた配列を作ります。
5.  要素の配列から、最初から順番に、演算子・関数である要素を探していきます。なければ、8に移ります。
6.  演算子・関数の演算に必要な要素を取り出してきます。
7.  演算し、その結果で演算子・被演算子を上書きします。5に戻ります。
8.  画面などに出力します。

実際の計算の様子です。

1.  `Input> 4 6 * 1 +` 入力値が入力されます。
2.  `["4","6","*","1","+"]` それぞれの値をスペースごとに分解します。
3.  `[4,整数]``[6,整数]``[*,演算子]``[1,整数]``[+,演算子]` それぞれを「要素」として扱います。
4.  `[ [4,整数],[6,整数],[*,演算子],[1,整数],[+,演算子] ]` 要素の配列を作ります。
5.  `[ [4,整数],[6,整数],[*,演算子],[1,整数],[+,演算子] ]` 演算子・関数を見つけます。
6.  `[ [4,整数],[6,整数],[*,演算子] ]` 演算に必要な要素を取り出します。
7.  `4 * 6`を計算し、配列の`[4,整数],[6,整数],[*,演算子]`があった部分を計算結果の`[24,整数]`で上書きします。
8.  `[ [24,整数],[1,整数],[+,演算子] ]` 演算子・関数を見つけます。
9.  `[ [24,整数],[1,整数],[+,演算子] ]` 演算に必要な要素を取り出します。
10. `24 + 1`を計算し、配列の`[24,整数],[1,整数],[+,演算子]`があった部分を計算結果の`[25,整数]`で上書きします。
11. `[ [25,整数] ]` 演算子・関数はみつかりません。
12. `25` 出力します。

謝辞
----

C++の基礎を小林健一郎さんのサイト[C++入門](http://www.asahi-net.or.jp/~yf8k-kbys/newcpp0.html)で勉強しました。
